// Code generated by goctl. DO NOT EDIT!
// Source: like.proto

package like

import (
	"context"

	"github.com/xh-polaris/meowchat-like-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCatPopularityReq   = pb.AddCatPopularityReq
	AddCatPopularityResp  = pb.AddCatPopularityResp
	AddScoreReq           = pb.AddScoreReq
	AddScoreResp          = pb.AddScoreResp
	CatPop                = pb.CatPop
	DailyUpdateReq        = pb.DailyUpdateReq
	DailyUpdateResp       = pb.DailyUpdateResp
	DoLikeReq             = pb.DoLikeReq
	DoLikeResp            = pb.DoLikeResp
	GetTargetLikesReq     = pb.GetTargetLikesReq
	GetTargetLikesResp    = pb.GetTargetLikesResp
	GetTopKReq            = pb.GetTopKReq
	GetTopKResp           = pb.GetTopKResp
	GetUserLikedReq       = pb.GetUserLikedReq
	GetUserLikedResp      = pb.GetUserLikedResp
	ItemScore             = pb.ItemScore
	ListCatPopularityReq  = pb.ListCatPopularityReq
	ListCatPopularityResp = pb.ListCatPopularityResp
	ListTopCatReq         = pb.ListTopCatReq
	ListTopCatResp        = pb.ListTopCatResp

	Like interface {
		// 点赞/取消赞
		DoLike(ctx context.Context, in *DoLikeReq, opts ...grpc.CallOption) (*DoLikeResp, error)
		// 获取用户是否点赞
		GetUserLike(ctx context.Context, in *GetUserLikedReq, opts ...grpc.CallOption) (*GetUserLikedResp, error)
		// 获取目标点赞数
		GetTargetLikes(ctx context.Context, in *GetTargetLikesReq, opts ...grpc.CallOption) (*GetTargetLikesResp, error)
		GetTopK(ctx context.Context, in *GetTopKReq, opts ...grpc.CallOption) (*GetTopKResp, error)
		AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
		DailyUpdate(ctx context.Context, in *DailyUpdateReq, opts ...grpc.CallOption) (*DailyUpdateResp, error)
		// popularity
		ListCatPopularity(ctx context.Context, in *ListCatPopularityReq, opts ...grpc.CallOption) (*ListCatPopularityResp, error)
		AddCatPopularity(ctx context.Context, in *AddCatPopularityReq, opts ...grpc.CallOption) (*AddCatPopularityResp, error)
		ListTopCat(ctx context.Context, in *ListTopCatReq, opts ...grpc.CallOption) (*ListTopCatResp, error)
	}

	defaultLike struct {
		cli zrpc.Client
	}
)

func NewLike(cli zrpc.Client) Like {
	return &defaultLike{
		cli: cli,
	}
}

// 点赞/取消赞
func (m *defaultLike) DoLike(ctx context.Context, in *DoLikeReq, opts ...grpc.CallOption) (*DoLikeResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.DoLike(ctx, in, opts...)
}

// 获取用户是否点赞
func (m *defaultLike) GetUserLike(ctx context.Context, in *GetUserLikedReq, opts ...grpc.CallOption) (*GetUserLikedResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.GetUserLike(ctx, in, opts...)
}

// 获取目标点赞数
func (m *defaultLike) GetTargetLikes(ctx context.Context, in *GetTargetLikesReq, opts ...grpc.CallOption) (*GetTargetLikesResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.GetTargetLikes(ctx, in, opts...)
}

func (m *defaultLike) GetTopK(ctx context.Context, in *GetTopKReq, opts ...grpc.CallOption) (*GetTopKResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.GetTopK(ctx, in, opts...)
}

func (m *defaultLike) AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.AddScore(ctx, in, opts...)
}

func (m *defaultLike) DailyUpdate(ctx context.Context, in *DailyUpdateReq, opts ...grpc.CallOption) (*DailyUpdateResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.DailyUpdate(ctx, in, opts...)
}

// popularity
func (m *defaultLike) ListCatPopularity(ctx context.Context, in *ListCatPopularityReq, opts ...grpc.CallOption) (*ListCatPopularityResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.ListCatPopularity(ctx, in, opts...)
}

func (m *defaultLike) AddCatPopularity(ctx context.Context, in *AddCatPopularityReq, opts ...grpc.CallOption) (*AddCatPopularityResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.AddCatPopularity(ctx, in, opts...)
}

func (m *defaultLike) ListTopCat(ctx context.Context, in *ListTopCatReq, opts ...grpc.CallOption) (*ListTopCatResp, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.ListTopCat(ctx, in, opts...)
}
